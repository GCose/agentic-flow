import { useState } from "react";
import { Loader2, Send, Mail, X } from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";

const ContentGenerator = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [prompt, setPrompt] = useState("");
  const [generatedContent, setGeneratedContent] = useState("");
  const [enableRecipients, setEnableRecipients] = useState(false);
  const [recipients, setRecipients] = useState<string[]>([]);
  const [currentRecipient, setCurrentRecipient] = useState("");
  const [platform, setPlatform] = useState("");
  const [error, setError] = useState("");

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      setError("Please enter a prompt before generating content.");
      return;
    }

    setError("");
    setIsGenerating(true);

    // Simulate API call
    try {
      await new Promise((resolve) => setTimeout(resolve, 2000));
      setGeneratedContent(
        "This is a sample generated content based on your prompt. In a real implementation, this would be generated by an AI model."
      );
    } catch {
      setError("An error occurred while generating content. Please try again.");
    } finally {
      setIsGenerating(false);
    }
  };

  const handleAddRecipient = () => {
    if (currentRecipient && isValidEmail(currentRecipient)) {
      setRecipients([...recipients, currentRecipient]);
      setCurrentRecipient("");
      setError("");
    } else {
      setError("Please enter a valid email address.");
    }
  };

  const handleRemoveRecipient = (email: string) => {
    setRecipients(recipients.filter((r) => r !== email));
  };

  const isValidEmail = (email: string) => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Generate New Content</CardTitle>
        <CardDescription>
          Enter a prompt to generate content with AI
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {error && (
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="space-y-2">
          <Label htmlFor="prompt">Prompt</Label>
          <Textarea
            id="prompt"
            placeholder="Enter your content prompt here..."
            className="min-h-[100px]"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
          />
        </div>

        <div className="space-y-4 pt-2">
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label htmlFor="recipient-targeting">Recipient Targeting</Label>
              <p className="text-xs text-muted-foreground">
                Enable to specify recipients for this content
              </p>
            </div>
            <Switch
              id="recipient-targeting"
              checked={enableRecipients}
              onCheckedChange={setEnableRecipients}
            />
          </div>

          {enableRecipients && (
            <div className="space-y-2">
              <Label htmlFor="recipients">Recipients</Label>
              <div className="flex gap-2">
                <Input
                  id="recipients"
                  value={currentRecipient}
                  placeholder="Enter email address"
                  onChange={(e) => setCurrentRecipient(e.target.value)}
                />
                <Button type="button" onClick={handleAddRecipient}>
                  Add
                </Button>
              </div>

              {recipients.length > 0 && (
                <div className="flex flex-wrap gap-2 mt-2">
                  {recipients.map((email) => (
                    <Badge
                      key={email}
                      variant="secondary"
                      className="flex items-center gap-1"
                    >
                      <Mail className="h-3 w-3" />
                      {email}
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-4 w-4 p-0 ml-1"
                        onClick={() => handleRemoveRecipient(email)}
                      >
                        <X className="h-3 w-3" />
                      </Button>
                    </Badge>
                  ))}
                </div>
              )}
            </div>
          )}

          <div className="space-y-2">
            <Label htmlFor="platform">Platform (Optional)</Label>
            <Select value={platform} onValueChange={setPlatform}>
              <SelectTrigger id="platform">
                <SelectValue placeholder="Select platform" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="facebook">Facebook</SelectItem>
                <SelectItem value="twitter">Twitter</SelectItem>
                <SelectItem value="linkedin">LinkedIn</SelectItem>
                <SelectItem value="instagram">Instagram</SelectItem>
                <SelectItem value="email">Email</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        {generatedContent && (
          <div className="space-y-2 pt-4">
            <Label>Generated Content</Label>
            <div className="rounded-md border p-4 bg-muted/50">
              <p className="whitespace-pre-wrap">{generatedContent}</p>
            </div>
          </div>
        )}
      </CardContent>
      <CardFooter>
        <Button
          className="ml-auto"
          disabled={isGenerating}
          onClick={handleGenerate}
        >
          {isGenerating ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <Send className="mr-2 h-4 w-4" />
              Generate Content
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  );
};

export default ContentGenerator;
